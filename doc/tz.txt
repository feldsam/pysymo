1. Надо структурировать проект в стиле flask:

/app
    /static
    /templates
    views.py
    forms.py
    __init__.py
    blablabla.py

config.py
run.py

2. Аутентификация я думаю не нужна, как вариант ее можно потом сделать
3. Надо переписать форму на flask-wtf и сделать множественный выбор host, facility, priority.
4. Сравнение по датам я посмотрел, вот так работает:

    req['d'] = {'$gt': datetime.strptime('11-05-2014 12:00', '%d-%m-%Y %H:%M')}

В интерфейсе можно будет задать "дата-время с", "дата-время по"

5. Служебный код (заполнение, очистка базы) надо вытащить в отдельные скрипты)

6. Я запушил два файла, в requirements добавил настройки для записи в syslog через скрипт. Но там все равно есть пару проблем:

 а) Я передаю на вход скрипта json-строку. И если в ней есть escape-последовательность, то скрипт ругаццо -

Invalid \escape: line 1 column 99 (char 99)
{"h": "mws", "f": "mail", "p": "info", "d": "1399895736", "a": "", "m": ": Application=smtp, Event=\'Real-time Blackhole List lookup triggered\', status=\'Reject, close and deny the connection\', source=(89.215.82.101), msgid=374a_2317_5232262e_d9cc_11e3_99d7_005056a738a0, convid=374a_2316_523225ac_d9cc_11e3_99d7_005056a738a0"}

 б) Периодически в лог попадают сообщения от syslog типа POLLERR - мутная ошибка, связанная с i/o.

Надо поделить задачу на два части - запись в mongo из syslog и web-морда к этому делу. Если мы определимся с форматом базы, тогда можно пока поработать с искусственно
сгенерированными данными.
